generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())  // Changed from Int to String
  email         String    @unique
  name          String?   @default("Anonymous")
  image         String?   @default("https://img.freepik.com/free-vector/mysterious-mafia-man-smoking-cigarette_52683-34828.jpg?t=st=1731344132~exp=1731347732~hmac=53253e86137cebf15ecc00fa1d6eb098813a1884e578dc7626d95d5765f977dd&w=740")
  role          String     @default("user")
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  Posts Post[]
  comments Comment[]
  upvotes Upvote[]
}

model Account {
  id                String  @id @default(cuid())
  userId           String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id String @id @default(cuid())
  content String
  title String
  author User @relation(fields: [authorid],references: [id])
  authorid String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments Comment[]
  upvotes Upvote[]
}

model Comment {
  id String @id() @default(cuid())
  postid String
  post Post @relation(fields: [postid],references: [id],onDelete: Cascade)
  content String
  authorid String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author User @relation(fields: [authorid],references: [id],onDelete: Cascade)
}

model Upvote{
  id String @id() @default(cuid())
  postid String
  post Post @relation(fields: [postid],references: [id],onDelete: Cascade)
  userid String
  user User @relation(fields: [userid],references: [id],onDelete: Cascade)
  @@unique([userid,postid])
}